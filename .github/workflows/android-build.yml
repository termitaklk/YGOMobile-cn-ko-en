name: Android Build

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  build:
    name: Build and Sign APK
    runs-on: ubuntu-latest

    env:
      ANDROID_NDK_HOME: ${{ github.workspace }}/android-ndk-r21d

    steps:
      # 游댳 **Paso 1: Clonar el repositorio**
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 游댳 **Paso 2: Descargar los assets antes de todo**
      - name: Download and Copy Assets
        run: |
          echo "Removing old assets..."
          rm -rf mobile/assets
          echo "Cloning assets repository..."
          git clone https://github.com/termitaklk/assets-mobile.git mobile/assets
          echo "Assets downloaded and placed in mobile/assets"

      # 游댳 **Paso 3: Descargar archivos adicionales que deben estar en `mobile/assets/data/`**
      - name: Ensure Required Asset Files
        run: |
          mkdir -p mobile/assets/data
          mkdir -p mobile/assets/data/fonts
          echo "Downloading required assets..."
          wget -O mobile/assets/data/cards.cdb https://github.com/termitaklk/assets-mobile/raw/refs/heads/main/data/cards.cdb  # Reemplazar con URL v치lida
          wget -O mobile/assets/data/pics.zip https://download1320.mediafire.com/dekb1j49ymtgtQZxpZa_fpE-_NSAPQPdv3dmWX4ctUvNQXOVJJmXwP8MljwoveSYOF1kgINTEyvBOxF5sp-Jm0ag5bvM5GfxY-GSM2C7aDb7ILYs1ity9nUGs08KAgeCtGHw5cFCqy0b6CAWBumcqI15CHiVtlyawaeXr--CQw_rqQ/61xo8fluqqdr4xr/pics.zip  # Reemplazar con URL v치lida
          wget -O mobile/assets/data/scripts.zip https://github.com/termitaklk/assets-mobile/raw/refs/heads/main/data/scripts.zip  # Reemplazar con URL v치lida
          wget -O mobile/assets/data/fonts/ygo.ttf https://github.com/termitaklk/assets-mobile/raw/refs/heads/main/data/fonts/ygo.ttf  # Reemplazar con URL v치lida

      # 游댳 **Paso 4: Cache del NDK**
      - name: Cache Android NDK
        uses: actions/cache@v3
        with:
          path: android-ndk-r21d
          key: ndk-${{ runner.os }}-r21d
          restore-keys: |
            ndk-${{ runner.os }}-

      - name: Download NDK r21d if Not Cached
        if: steps.ndk-cache.outputs.cache-hit != 'true'
        run: |
          wget -q https://dl.google.com/android/repository/android-ndk-r21d-linux-x86_64.zip -O ndk.zip
          rm -rf android-ndk-r21d
          unzip -o ndk.zip > /dev/null
          echo "NDK installed at: $(pwd)/android-ndk-r21d"

      # 游댳 **Paso 5: Configurar Java y Gradle**
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            mobile/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission to Gradlew
        run: chmod +x gradlew

      # 游댳 **Paso 6: Descargar `libWindbot.aar` y colocarlo en `mobile/libs/`**
      - name: Download libWindbot.aar
        run: |
          mkdir -p mobile/libs
          wget -O mobile/libs/libWindbot.aar $(curl -s https://api.github.com/repos/mercury233/libWindbot/releases/latest | grep "browser_download_url" | cut -d '"' -f 4)

      # 游댳 **Paso 7: Cache para la compilaci칩n de NDK**
      - name: Cache NDK Build output
        uses: actions/cache@v3
        with:
          path: |
            libcore/obj
            libcore/libs
          key: ndk-build-${{ runner.os }}-${{ hashFiles('libcore/**') }}
          restore-keys: |
            ndk-build-${{ runner.os }}-

      - name: Build Native Libraries
        run: |
          cd libcore
          if [ ! -d "obj" ] || [ ! -d "libs" ]; then
            echo "No cache found, building NDK..."
            $ANDROID_NDK_HOME/ndk-build -j4
          else
            echo "Using cached NDK build."
          fi

      # 游댳 **Paso 8: Generar Keystore para firmar la APK**
      - name: Generate Keystore
        run: |
          keytool -genkeypair -v \
            -keystore $GITHUB_WORKSPACE/my-release-key.jks \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -alias my-key-alias \
            -storepass android \
            -keypass android \
            -dname "CN=Android Debug,O=Android,C=US"

      # 游댳 **Paso 9: Compilar la APK con cach칠 de Gradle**
      - name: Build Signed APK
        run: |
          cd mobile
          ../gradlew assembleRelease --stacktrace --info \
            -Pandroid.injected.signing.store.file=$GITHUB_WORKSPACE/my-release-key.jks \
            -Pandroid.injected.signing.store.password=android \
            -Pandroid.injected.signing.key.alias=my-key-alias \
            -Pandroid.injected.signing.key.password=android

      # 游댳 **Paso 10: Verificar si el APK se gener칩 correctamente**
      - name: Debug APK Output
        if: always()
        run: |
          echo "Checking generated APKs..."
          ls -R mobile/build/outputs/apk/ || echo "No APKs found"

      # 游댳 **Paso 11: Subir el APK como artifact**
      - name: Upload Signed APK
        uses: actions/upload-artifact@v4
        with:
          name: Signed-YGOMobile-APK
          path: mobile/build/outputs/apk/cn/release/YGOMobile_3.12.0.Apk







