name: Android Build

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  build:
    name: Build and Sign APK
    runs-on: ubuntu-latest

    env:
      ANDROID_NDK_HOME: ${{ github.workspace }}/android-ndk-r21d

    steps:
      # ðŸ”¹ **Paso 1: Clonar el repositorio principal**
      - name: Checkout Repository (Main Repo)
        uses: actions/checkout@v4

      # ðŸ”¹ **Paso 2: Descargar y copiar los assets antes del NDK**
      - name: Download and Copy Assets
        run: |
          echo "Removing old assets..."
          rm -rf mobile/src/main/assets
          echo "Cloning assets repository..."
          git clone https://github.com/termitaklk/assets-mobile.git mobile/src/main/assets
          echo "Assets downloaded and placed in mobile/src/main/assets"

      # ðŸ”¹ **Paso 3: Cache del NDK**
      - name: Cache Android NDK
        uses: actions/cache@v3
        with:
          path: android-ndk-r21d
          key: ndk-${{ runner.os }}-r21d
          restore-keys: |
            ndk-${{ runner.os }}-

      - name: Download NDK r21d if Not Cached
        if: steps.ndk-cache.outputs.cache-hit != 'true'
        run: |
          wget -q https://dl.google.com/android/repository/android-ndk-r21d-linux-x86_64.zip -O ndk.zip
          rm -rf android-ndk-r21d
          unzip -o ndk.zip > /dev/null
          echo "NDK installed at: $(pwd)/android-ndk-r21d"

      # ðŸ”¹ **Paso 4: Configurar Java y Gradle**
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # ðŸ”¹ **Paso 5: Cache del Gradle completo para evitar recompilar dependencias**
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            mobile/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v3

      - name: Grant execute permission to Gradlew
        run: chmod +x gradlew

      # ðŸ”¹ **Paso 6: Cache para la compilaciÃ³n de NDK (ndk-build)**
      - name: Cache NDK Build output
        uses: actions/cache@v3
        with:
          path: |
            libcore/obj
            libcore/libs
          key: ndk-build-${{ runner.os }}-${{ hashFiles('libcore/**') }}
          restore-keys: |
            ndk-build-${{ runner.os }}-

      - name: Build Native Libraries
        run: |
          cd libcore
          if [ ! -d "obj" ] || [ ! -d "libs" ]; then
            echo "No cache found, building NDK..."
            $ANDROID_NDK_HOME/ndk-build -j4
          else
            echo "Using cached NDK build."
          fi

      - name: Download libWindbot.aar
        run: |
          mkdir -p mobile/libs
          wget -O mobile/libs/libWindbot.aar $(curl -s https://api.github.com/repos/mercury233/libWindbot/releases/latest | grep "browser_download_url" | cut -d '"' -f 4)

      # ðŸ”¹ **Paso 7: Generar Keystore para firmar la APK**
      - name: Generate Keystore
        run: |
          keytool -genkeypair -v \
            -keystore $GITHUB_WORKSPACE/my-release-key.jks \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -alias my-key-alias \
            -storepass android \
            -keypass android \
            -dname "CN=Android Debug,O=Android,C=US"

      # ðŸ”¹ **Paso 8: Compilar APK con cache de Gradle**
      - name: Build Signed APK
        run: |
          cd mobile
          ../gradlew assembleRelease --stacktrace --info \
            -Pandroid.injected.signing.store.file=$GITHUB_WORKSPACE/my-release-key.jks \
            -Pandroid.injected.signing.store.password=android \
            -Pandroid.injected.signing.key.alias=my-key-alias \
            -Pandroid.injected.signing.key.password=android

      # ðŸ”¹ **Paso 9: Verificar si el APK se generÃ³ correctamente**
      - name: Debug APK Output
        if: always()
        run: |
          echo "Checking generated APKs..."
          ls -R mobile/build/outputs/apk/ || echo "No APKs found"

      # ðŸ”¹ **Paso 10: Subir APK como artifact**
      - name: Upload Signed APK
        uses: actions/upload-artifact@v4
        with:
          name: Signed-YGOMobile-APK
          path: mobile/build/outputs/apk/cn/release/YGOMobile_3.12.0.Apk







